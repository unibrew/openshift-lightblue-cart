#!/bin/bash -eu

source $OPENSHIFT_JBOSSEAP_DIR/bin/util

# Name: get_war
# Description: gets the most recent version of war with this cart's major and minor version
# Parameters:
#   $1 - URL to root directory on central repository (i.e. the dir where maven-metdata.xml resides)
#   $2 - Name of env variable in which to store version (latest)
function get_war {
    BASE_URL=$1
    ENV_VAR=$2
    echo "exec: wget $BASE_URL/maven-metadata.xml -O /tmp/maven-metadata.xml"
    wget $BASE_URL/maven-metadata.xml -O /tmp/maven-metadata.xml

    # always simply get the latest version that has been released for the given URL
    # (necessary because rest and web app versions are not the same anymore)

    echo "exec: xmllint --shell /tmp/maven-metadata.xml <<< \`echo \"cat /metadata/versioning/latest/text()\"\` | grep -v \"^[/]\" | sort | tail -n1"
    BASE_VERSION=$(xmllint --shell /tmp/maven-metadata.xml <<< `echo "cat /metadata/versioning/latest/text()"` | grep -v "^[/]" | sort | tail -n1) 

    # if there's no BASE_VERSION value it means there's no 'latest' element. seems to happen when there is only one version
    if [ "$BASE_VERSION" == "" ]; then
        echo "exec: xmllint --shell /tmp/maven-metadata.xml <<< \`echo \"cat /metadata/versioning/versions/version/text()\"\` | grep -v \"^[/]\" | sort | tail -n1"
        BASE_VERSION=$(xmllint --shell /tmp/maven-metadata.xml <<< `echo "cat /metadata/versioning/versions/version/text()"` | grep -v "^[/]" | sort | tail -n1)
    fi

    # if using SNAPSHOT, have to do another step to get real version
    if [ ! -z "${SNAPSHOT-}" ] && [ "$SNAPSHOT" = "true" ]; then
        # now need to get the real version.
        echo "exec: wget $BASE_URL/$BASE_VERSION/maven-metadata.xml -O /tmp/maven-metadata.xml"
        wget $BASE_URL/$BASE_VERSION/maven-metadata.xml -O /tmp/maven-metadata.xml

        echo "exec: xmllint --shell /tmp/maven-metadata.xml <<< \`echo \"cat /metadata/versioning/snapshotVersions/snapshotVersion/value[../extension='war']/text()\"\` | grep -v \"^[/]\" | sort | tail -n1"
        WAR_VERSION=$(xmllint --shell /tmp/maven-metadata.xml <<< `echo "cat /metadata/versioning/snapshotVersions/snapshotVersion/value[../extension='war']/text()"` | grep -v "^[/]" | sort | tail -n1)
    else
        # base and war versions are the same for this scenario (non-snapshot)
        WAR_VERSION=$BASE_VERSION
    fi
    echo "BASE_VERSION='${BASE_VERSION}'"
    echo "WAR_VERSION='${WAR_VERSION}'"
    ARTIFACT_ID=$(xmllint --shell /tmp/maven-metadata.xml <<< `echo "cat /metadata/artifactId/text()"` | grep -v "^[/]")
    echo "ARTIFACT_ID='${ARTIFACT_ID}'"
    WAR_NAME=$ARTIFACT_ID-$WAR_VERSION.war
    echo "WAR_NAME='${WAR_NAME}'"
    echo "${WAR_VERSION}" > ${OPENSHIFT_JBOSSEAP_DIR}/env/${ENV_VAR}
    echo "exec: wget $BASE_URL/$BASE_VERSION/$WAR_NAME -O $OPENSHIFT_JBOSSEAP_DIR/standalone/deployments/$WAR_NAME"
    wget $BASE_URL/$BASE_VERSION/$WAR_NAME -O $OPENSHIFT_JBOSSEAP_DIR/standalone/deployments/$WAR_NAME
    echo "exec: wget $BASE_URL/$BASE_VERSION/$WAR_NAME.md5 -O /tmp/$WAR_NAME.md5"
    wget $BASE_URL/$BASE_VERSION/$WAR_NAME.md5 -O /tmp/$WAR_NAME.md5
    test `md5sum $OPENSHIFT_JBOSSEAP_DIR/standalone/deployments/${WAR_NAME} | awk '{print $1}' | tr -d '\n'` = `cat /tmp/${WAR_NAME}.md5` || (echo "MD5SUM check failed for $OPENSHIFT_JBOSSEAP_DIR/standalone/deployments/${WAR_NAME}" && exit)
}

case "$1" in
  -v|--version)
    version="$2"
esac

echo "$version" > "$OPENSHIFT_JBOSSEAP_DIR/env/OPENSHIFT_JBOSSEAP_VERSION"

shopt -s dotglob
cp -r ${OPENSHIFT_JBOSSEAP_DIR}/versions/${version}/template/* ${OPENSHIFT_JBOSSEAP_DIR}/template
cp -r ${OPENSHIFT_JBOSSEAP_DIR}/versions/${version}/template/.openshift ${OPENSHIFT_JBOSSEAP_DIR}/template
cp ${OPENSHIFT_JBOSSEAP_DIR}/standalone/configuration/standalone.xml ${OPENSHIFT_JBOSSEAP_DIR}/template/.openshift/config

sed -i "s/{APP_NAME}/${OPENSHIFT_APP_NAME}/g" ${OPENSHIFT_JBOSSEAP_DIR}/template/pom.xml

# if you want the latest snapshot simply set env var SNAPSHOT to the string "true"
BASE_MAVEN_URL=http://repo1.maven.org/maven2
if [ ! -z "${SNAPSHOT-}" ] && [ "$SNAPSHOT" = "true" ]; then
    BASE_MAVEN_URL=https://oss.sonatype.org/service/local/repositories/snapshots/content
fi

# Install metadata REST application
get_war $BASE_MAVEN_URL/com/redhat/lightblue/rest/lightblue-rest-metadata OPENSHIFT_LIGHTBLUE_METADATA_REST_APP_VERSION

# Install crud REST application
get_war $BASE_MAVEN_URL/com/redhat/lightblue/rest/lightblue-rest-crud OPENSHIFT_LIGHTBLUE_CRUD_REST_APP_VERSION

# Install metadata management application (latest)
get_war $BASE_MAVEN_URL/com/redhat/lightblue/applications/lightblue-applications-metadata-mgmt OPENSHIFT_LIGHTBLUE_METADATA_MANAGEMENT_APP_VERSION

# Install crud management application (FUTURE)
#get_war $BASE_MAVEN_URL/com/redhat/lightblue/applications/crud-mgmt OPENSHIFT_LIGHTBLUE_METADATA_CRUD_APP_VERSION

# Create and install the initial template WAR
pushd $OPENSHIFT_JBOSSEAP_DIR/versions/${version}/template/src/main/webapp 1>/dev/null
  jar cvf $OPENSHIFT_JBOSSEAP_DIR/standalone/deployments/ROOT.war ./*
popd 1> /dev/null

# TODO don't hard code this..
JBOSS_HOME=/etc/alternatives/jbosseap-6
pushd $OPENSHIFT_JBOSSEAP_DIR 1> /dev/null
  ln -s ${JBOSS_HOME}/jboss-modules.jar
  ln -s ${JBOSS_HOME}/modules
popd 1> /dev/null

touch ${OPENSHIFT_JBOSSEAP_DIR}/env/OPENSHIFT_JBOSSEAP_CLUSTER
touch ${OPENSHIFT_JBOSSEAP_DIR}/env/OPENSHIFT_JBOSSEAP_CLUSTER_REMOTING

update_configuration java8
